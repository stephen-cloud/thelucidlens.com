{"version":3,"sources":["webpack:///./node_modules/@chakra-ui/layout/dist/esm/grid.js","webpack:///./node_modules/@chakra-ui/layout/dist/esm/simple-grid.js","webpack:///./src/components/section-card.tsx","webpack:///./src/pages/index.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","Grid","props","ref","area","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","div","__css","displayName","SimpleGrid","count","width","columns","spacingX","spacingY","spacing","minChildWidth","value","n","SectionCard","section","console","log","first","nodes","to","relativeDirectory","minHeight","minWidth","fixed","childImageSharp","query","IndexPage","data","title","sm","md","allFile","group","map"],"mappings":"2NAAA,SAASA,IAeP,OAdAA,EAAWC,OAAOC,QAAU,SAAUC,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,IAGOS,MAAMC,KAAMR,WAG9B,SAASS,EAA8BP,EAAQQ,GAC7C,GAAc,MAAVR,EAAgB,MAAO,GAC3B,IAEIC,EAAKJ,EAFLD,EAAS,GACTa,EAAaf,OAAOgB,KAAKV,GAG7B,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IACjCI,EAAMQ,EAAWZ,GACbW,EAASG,QAAQV,IAAQ,IAC7BL,EAAOK,GAAOD,EAAOC,IAGvB,OAAOL,EAeF,IAAIgB,EAAoB,aAAW,SAAUC,EAAOC,GACzD,IAAIC,EAAOF,EAAME,KACbC,EAAgBH,EAAMG,cACtBC,EAAMJ,EAAMI,IACZC,EAASL,EAAMK,OACfC,EAAYN,EAAMM,UAClBC,EAASP,EAAMO,OACfC,EAAMR,EAAMQ,IACZC,EAAWT,EAAMS,SACjBC,EAAWV,EAAMU,SACjBC,EAAeX,EAAMW,aACrBC,EAAcZ,EAAMY,YACpBC,EAAkBb,EAAMa,gBACxBC,EAAOpB,EAA8BM,EAAO,CAAC,OAAQ,gBAAiB,MAAO,SAAU,YAAa,SAAU,MAAO,WAAY,WAAY,eAAgB,cAAe,oBAE5Ke,EAAS,CACXC,QAAS,OACTC,SAAUf,EACVgB,kBAAmBf,EACnBgB,QAASf,EACTgB,WAAYf,EACZgB,cAAef,EACfgB,gBAAiBV,EACjBW,WAAYhB,EACZiB,QAAShB,EACTiB,aAAchB,EACdiB,aAAchB,EACdiB,iBAAkBhB,EAClBiB,oBAAqBf,GAEvB,OAAoB,gBAAoB,IAAOgB,IAAKjD,EAAS,CAC3DqB,IAAKA,EACL6B,MAAOf,GACND,OAGD,MACFf,EAAKgC,YAAc,QClFrB,SAAS,IAeP,OAdA,EAAWlD,OAAOC,QAAU,SAAUC,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,IAGOS,MAAMC,KAAMR,WA+BvB,IAAI+C,EAA0B,aAAW,SAAUhC,EAAOC,GAC/D,IA+BsBgC,EANAC,EAzBlBC,EAAUnC,EAAMmC,QAChBC,EAAWpC,EAAMoC,SACjBC,EAAWrC,EAAMqC,SACjBC,EAAUtC,EAAMsC,QAChBC,EAAgBvC,EAAMuC,cACtBzB,EAlCN,SAAuC3B,EAAQQ,GAC7C,GAAc,MAAVR,EAAgB,MAAO,GAC3B,IAEIC,EAAKJ,EAFLD,EAAS,GACTa,EAAaf,OAAOgB,KAAKV,GAG7B,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IACjCI,EAAMQ,EAAWZ,GACbW,EAASG,QAAQV,IAAQ,IAC7BL,EAAOK,GAAOD,EAAOC,IAGvB,OAAOL,EAsBI,CAA8BiB,EAAO,CAAC,UAAW,WAAY,WAAY,UAAW,kBAE3Fa,EAAkB0B,GAkBAL,EAlB+BK,EAmB9C,YAAcL,GAAO,SAAUM,GACpC,OAAO,YAAOA,GAAS,KAAO,4BANpBC,EAMsDD,GAL3D,YAASC,GAAKA,EAAI,KAAOA,GAK2C,WAN7E,IAAcA,OAUUR,EAxB+DE,EAyB9E,YAAcF,GAAO,SAAUO,GACpC,OAAO,YAAOA,GAAS,KAAO,UAAYA,EAAQ,aAzBpD,OAAoB,gBAAoBzC,EAAM,EAAS,CACrDE,IAAKA,EACLG,IAAKkC,EACLhC,UAAW8B,EACX/B,OAAQgC,EACRxB,gBAAiBA,GAChBC,OAGD,MACFkB,EAAWD,YAAc,c,6DC9CZW,MAbf,YAAkC,IAAXC,EAAW,EAAXA,QACnBC,QAAQC,IAAI,eAAgBF,GAC5B,IAAMG,EAAQH,EAAQI,MAAM,GAE5B,OACI,kBAAC,OAAD,CAAMC,GAAE,YAAcF,EAAMG,mBACxB,kBAAC,IAAD,CAAKC,UAAU,MAAMC,SAAS,OAC1B,kBAAC,IAAD,CAAKC,MAAON,EAAMO,gBAAgBD,WCUrCE,GAFEC,UAfG,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAEnB,OADAZ,QAAQC,IAAI,aAAcW,GAExB,kBAAC,IAAD,CAAQC,MAAM,aACZ,kBAACzB,EAAD,CAAYG,QAAS,CAAEuB,GAAI,EAAGC,GAAI,GAAKrB,QAAS,GAE5CkB,EAAKI,QAAQC,MAAMC,KAAI,SAACnB,GAAD,OAAa,kBAAC,IAAD,CAAKvD,IAAKuD,EAAQM,mBACpD,kBAAC,EAAD,CAAaN,QAASA,WAUb","file":"component---src-pages-index-tsx-3c6a40827cecbddfe23e.js","sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/grid\n */\n\nexport var Grid = /*#__PURE__*/forwardRef(function (props, ref) {\n  var area = props.area,\n      templateAreas = props.templateAreas,\n      gap = props.gap,\n      rowGap = props.rowGap,\n      columnGap = props.columnGap,\n      column = props.column,\n      row = props.row,\n      autoFlow = props.autoFlow,\n      autoRows = props.autoRows,\n      templateRows = props.templateRows,\n      autoColumns = props.autoColumns,\n      templateColumns = props.templateColumns,\n      rest = _objectWithoutPropertiesLoose(props, [\"area\", \"templateAreas\", \"gap\", \"rowGap\", \"columnGap\", \"column\", \"row\", \"autoFlow\", \"autoRows\", \"templateRows\", \"autoColumns\", \"templateColumns\"]);\n\n  var styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles\n  }, rest));\n});\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\";\n}\n\nfunction spanFn(span) {\n  return mapResponsive(span, function (value) {\n    return value === \"auto\" ? \"auto\" : \"span \" + value + \"/span \" + value;\n  });\n}\n\nexport var GridItem = /*#__PURE__*/forwardRef(function (props, ref) {\n  var colSpan = props.colSpan,\n      colStart = props.colStart,\n      colEnd = props.colEnd,\n      rowEnd = props.rowEnd,\n      rowSpan = props.rowSpan,\n      rowStart = props.rowStart,\n      rest = _objectWithoutPropertiesLoose(props, [\"colSpan\", \"colStart\", \"colEnd\", \"rowEnd\", \"rowSpan\", \"rowStart\"]);\n\n  var styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles\n  }, rest));\n});","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Grid } from \"./grid\";\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\n\nexport var SimpleGrid = /*#__PURE__*/forwardRef(function (props, ref) {\n  var columns = props.columns,\n      spacingX = props.spacingX,\n      spacingY = props.spacingY,\n      spacing = props.spacing,\n      minChildWidth = props.minChildWidth,\n      rest = _objectWithoutPropertiesLoose(props, [\"columns\", \"spacingX\", \"spacingY\", \"spacing\", \"minChildWidth\"]);\n\n  var templateColumns = minChildWidth ? widthToColumns(minChildWidth) : countToColumns(columns);\n  return /*#__PURE__*/React.createElement(Grid, _extends({\n    ref: ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns: templateColumns\n  }, rest));\n});\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\";\n}\n\nfunction toPx(n) {\n  return isNumber(n) ? n + \"px\" : n;\n}\n\nfunction widthToColumns(width) {\n  return mapResponsive(width, function (value) {\n    return isNull(value) ? null : \"repeat(auto-fit, minmax(\" + toPx(value) + \", 1fr))\";\n  });\n}\n\nfunction countToColumns(count) {\n  return mapResponsive(count, function (value) {\n    return isNull(value) ? null : \"repeat(\" + value + \", 1fr)\";\n  });\n}","import { StarIcon } from '@chakra-ui/icons';\nimport { Box, Image, VStack, Text, Spacer, Flex, Button, Container } from \"@chakra-ui/react\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport Img from 'gatsby-image'\n\nfunction SectionCard({ section }) {\n    console.log('section card', section)\n    const first = section.nodes[0]\n\n    return (\n        <Link to={`/section/${first.relativeDirectory}`}>\n            <Box minHeight=\"300\" minWidth=\"300\">\n                <Img fixed={first.childImageSharp.fixed} />\n            </Box>\n        </Link>\n    );\n};\n\nexport default SectionCard;\n","import { Button, SimpleGrid, Box } from \"@chakra-ui/react\"\nimport { graphql } from \"gatsby\"\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport SectionCard from \"../components/section-card\"\n\nconst IndexPage = ({ data }) => {\n  console.log('index data', data)\n  return (\n    <Layout title=\"Portfolio\">\n      <SimpleGrid columns={{ sm: 1, md: 3 }} spacing={4}>\n        {\n          data.allFile.group.map((section) => <Box key={section.relativeDirectory}>\n            <SectionCard section={section} />\n          </Box>)\n        }\n      </SimpleGrid>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  {\n    allFile(filter: {sourceInstanceName: {eq: \"portfolio\"}}) {\n      group(field: relativeDirectory, limit: 1) {\n        nodes {\n          relativeDirectory\n          childImageSharp {\n            fluid(maxWidth: 700) {\n              ...GatsbyImageSharpFluid\n            }\n            fixed(width: 300, height: 300) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n"],"sourceRoot":""}